<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Brick Breaker Game</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { font-family: 'Segoe UI', sans-serif; background: #f4f4f4; text-align: center; }
    canvas { background: #eee; display: none; margin: 20px auto; border: 1px solid #333; }
    #lobby, #shop, #gameOverScreen { display: none; padding: 20px; }
    h1, h2, h3 { color: #333; }
    button {
      padding: 10px 15px;
      font-size: 16px;
      margin: 10px 5px;
      background: #444;
      color: #fff;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    button:hover { background: #222; }
    .skin-group { margin: 20px 0; }
    .skin-item {
      display: inline-block;
      width: 100px;
      padding: 10px;
      background: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      margin: 8px;
    }
    .skin-item img {
      width: 60px;
      height: 60px;
      margin-bottom: 5px;
      border-radius: 4px;
      border: 1px solid #ccc;
    }
    .coin-display {
      font-weight: bold;
      color: #444;
    }
  </style>
</head>
<body>

<div id="lobby">
  <h1>Brick Breaker</h1>
  <p>Coins: <span class="coin-display" id="coinCount">0</span></p>
  <button onclick="startGame()">Start Game</button>
  <button onclick="openShop()">Shop</button>
</div>

<div id="shop">
  <h2>Shop</h2>
  <p>Coins: <span class="coin-display" id="shopCoinCount">0</span></p>
  <div class="skin-group">
    <h3>Ball Skins</h3>
    <div id="ballSkins"></div>
  </div>
  <div class="skin-group">
    <h3>Paddle Skins</h3>
    <div id="paddleSkins"></div>
  </div>
  <div class="skin-group">
    <h3>Brick Skins</h3>
    <div id="brickSkins"></div>
  </div>
  <button onclick="closeShop()">Back to Lobby</button>
</div>

<canvas id="gameCanvas" width="360" height="640"></canvas>

<div id="gameOverScreen">
  <h2 id="gameOverText"></h2>
  <button onclick="restartGame()">Restart</button>
  <button onclick="returnToLobby()">Lobby</button>
</div>

<script>
let canvas, ctx;
let coins = 0;
let ballSpeed = 3;
let gameRunning = false;
let paddleMove = 0;
let score = 0;
let ball, paddle, bricks = [];
let selectedSkin = { ball: 1, paddle: 1, brick: 1 };
let ownedSkins = { ball: [], paddle: [], brick: [] };
const brickPerRow = 8, brickRows = 5;

function updateCoinDisplay() {
  document.getElementById('coinCount').textContent = coins;
  document.getElementById('shopCoinCount').textContent = coins;
}

function saveData() {
  localStorage.setItem('ownedSkins', JSON.stringify(ownedSkins));
  localStorage.setItem('selectedSkin', JSON.stringify(selectedSkin));
  localStorage.setItem('coins', coins);
}

function loadData() {
  const os = localStorage.getItem('ownedSkins');
  if (os) ownedSkins = JSON.parse(os);
  const ss = localStorage.getItem('selectedSkin');
  if (ss) selectedSkin = JSON.parse(ss);
  const savedCoins = localStorage.getItem('coins');
  if (savedCoins) coins = parseInt(savedCoins);
}

function createShopItems() {
  const skinTypes = [
    { id: 'ballSkins', prefix: 'ball' },
    { id: 'paddleSkins', prefix: 'paddle' },
    { id: 'brickSkins', prefix: 'brick' }
  ];

  skinTypes.forEach(type => {
    const container = document.getElementById(type.id);
    container.innerHTML = '';
    for (let i = 1; i <= 20; i++) {
      const div = document.createElement('div');
      div.className = 'skin-item';
      const img = document.createElement('img');
      img.src = `img/${type.prefix}${i}.png`;
      img.alt = `${type.prefix} skin ${i}`;

      const btn = document.createElement('button');
      if (ownedSkins[type.prefix].includes(i)) {
        btn.textContent = (selectedSkin[type.prefix] === i) ? 'Selected' : 'Select';
        btn.onclick = () => {
          selectedSkin[type.prefix] = i;
          saveData();
          createShopItems();
        };
      } else {
        btn.textContent = 'Buy (3)';
        btn.onclick = () => {
          if (coins >= 3) {
            coins -= 3;
            ownedSkins[type.prefix].push(i);
            selectedSkin[type.prefix] = i;
            saveData();
            updateCoinDisplay();
            createShopItems();
          } else {
            alert('Not enough coins!');
          }
        };
      }

      div.appendChild(img);
      div.appendChild(btn);
      container.appendChild(div);
    }
  });
}

function startGame() {
  canvas = document.getElementById('gameCanvas');
  ctx = canvas.getContext('2d');
  document.getElementById('lobby').style.display = 'none';
  canvas.style.display = 'block';
  initGame();
}

function returnToLobby() {
  canvas.style.display = 'none';
  document.getElementById('gameOverScreen').style.display = 'none';
  document.getElementById('lobby').style.display = 'block';
}

function openShop() {
  document.getElementById('lobby').style.display = 'none';
  document.getElementById('shop').style.display = 'block';
  updateCoinDisplay();
}

function closeShop() {
  document.getElementById('shop').style.display = 'none';
  document.getElementById('lobby').style.display = 'block';
}

function initGame() {
  ball = { x: canvas.width / 2, y: canvas.height - 30, dx: ballSpeed, dy: -ballSpeed, radius: 8 };
  paddle = { x: canvas.width / 2 - 35, width: 70, height: 10, speed: 5 };
  createBricks();
  score = 0;
  gameRunning = true;
  document.addEventListener('keydown', handleKeyDown);
  document.addEventListener('keyup', handleKeyUp);
  enableTouchControls();
  requestAnimationFrame(gameLoop);
}

function createBricks() {
  bricks = [];
  for (let r = 0; r < brickRows; r++) {
    for (let c = 0; c < brickPerRow; c++) {
      bricks.push({ x: c * 45, y: r * 25 + 30, width: 40, height: 20, destroyed: false });
    }
  }
}

function handleKeyDown(e) {
  if (e.key === 'ArrowLeft') paddleMove = -paddle.speed;
  if (e.key === 'ArrowRight') paddleMove = paddle.speed;
}

function handleKeyUp(e) {
  if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') paddleMove = 0;
}

function enableTouchControls() {
  canvas.addEventListener('touchstart', e => {
    const touchX = e.touches[0].clientX - canvas.getBoundingClientRect().left;
    paddle.x = touchX - paddle.width / 2;
    e.preventDefault();
  });
  canvas.addEventListener('touchmove', e => {
    const touchX = e.touches[0].clientX - canvas.getBoundingClientRect().left;
    paddle.x = touchX - paddle.width / 2;
    e.preventDefault();
  });
}

function gameLoop() {
  if (!gameRunning) return;
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  paddle.x += paddleMove;
  if (paddle.x < 0) paddle.x = 0;
  if (paddle.x + paddle.width > canvas.width) paddle.x = canvas.width - paddle.width;
  ctx.fillStyle = '#333';
  ctx.fillRect(paddle.x, canvas.height - paddle.height - 10, paddle.width, paddle.height);
  ctx.beginPath();
  ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
  ctx.fillStyle = 'red';
  ctx.fill();
  ctx.closePath();
  bricks.forEach(brick => {
    if (!brick.destroyed) {
      ctx.fillStyle = 'blue';
      ctx.fillRect(brick.x, brick.y, brick.width, brick.height);
    }
  });
  ball.x += ball.dx;
  ball.y += ball.dy;
  if (ball.x + ball.radius > canvas.width || ball.x - ball.radius < 0) ball.dx *= -1;
  if (ball.y - ball.radius < 0) ball.dy *= -1;
  if (ball.y + ball.radius > canvas.height - paddle.height - 10 && ball.x > paddle.x && ball.x < paddle.x + paddle.width) ball.dy *= -1;
  bricks.forEach(brick => {
    if (!brick.destroyed && ball.x > brick.x && ball.x < brick.x + brick.width && ball.y > brick.y && ball.y < brick.y + brick.height) {
      brick.destroyed = true;
      ball.dy *= -1;
      score++;
      if (score % 5 === 0) {
        ball.dx *= 1.05;
        ball.dy *= 1.05;
      }
    }
  });
  if (score === brickPerRow * brickRows) gameOver(true);
  if (ball.y + ball.radius > canvas.height) gameOver(false);
  requestAnimationFrame(gameLoop);
}

function gameOver(won) {
  gameRunning = false;
  document.removeEventListener('keydown', handleKeyDown);
  document.removeEventListener('keyup', handleKeyUp);
  document.getElementById('gameOverScreen').style.display = 'block';
  document.getElementById('gameOverText').textContent = won ? 'You Win!' : 'Game Over';
  if (won) {
    coins += 3;
    updateCoinDisplay();
    saveData();
  }
}

function restartGame() {
  document.getElementById('gameOverScreen').style.display = 'none';
  ballSpeed = 3;
  startGame();
}

window.onload = () => {
  loadData();
  document.getElementById('lobby').style.display = 'block';
  createShopItems();
  updateCoinDisplay();
};
</script>

</body>
</html>
